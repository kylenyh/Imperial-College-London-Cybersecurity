

# Scenario: Detecting XSS Vulnerabilities in a Banking Website

# Problem:
# A cybersecurity analyst working for a financial institution is tasked with testing the security of the bankâ€™s online customer portal. 
# The company recently launched a new login and feedback form, and the security team wants to ensure that the website is not vulnerable to Cross-Site Scripting (XSS) attacks.
# To simulate a potential attack, the analyst decides to scan the website for XSS vulnerabilities using an automated Python script. 

# Beautiful Soup is a library that makes it easy to scrape information from web pages. 
# It sits atop an HTML or XML parser, providing Pythonic idioms for iterating, searching, and modifying the parse tree.

# Import the libraries 
import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

# Function that fetches all HTML forms from a given URL
def get_all_forms(url):
    response = requests.get(url)
    soup = bs(response.content, "html.parser")
    return soup.find_all("form")

# Function that extracts form details like action, method and input fields
def get_form_details(form):
    return {
        "action": form.attrs.get("action", "").lower(),
        "method": form.attrs.get("method", "get").lower(),
        "inputs": [{
            "type": input_tag.attrs.get("type", "text"),
            "name": input_tag.attrs.get("name")
        } for input_tag in form.find_all("input")]
    }

# Function that submits a form using GET or POST method with the given payload
def submit_form(form_details, url, payload):
    target_url = urljoin(url, form_details["action"])
    data = {input_tag["name"]: payload for input_tag in form_details["inputs"] if input_tag["name"]}

    print(f"[+] Submitting to {target_url} with data: {data}")
    return requests.post(target_url, data=data) if form_details["method"] == "post" else requests.get(target_url, params=data)

# Function that scans the URL for XSS vulnerabilities by injecting a JavaScript payload
def scan_xss(url):
    forms = get_all_forms(url)
    print(f"[+] Found {len(forms)} forms on {url}")
    js_payload = "<script>alert('XSS')</script>"

    for form in forms:
        form_details = get_form_details(form)
        response = submit_form(form_details, url, js_payload)

        # Check if the payload is reflected in the response
        if js_payload in response.text:
            print(f"[+] XSS Vulnerability Detected at {url}")
            print("[*] Form Details:", form_details)
            return True
    print("[-] No XSS Vulnerabilities Found.")
    return False


if __name__ == "__main__":
    url = "https://www.ucl.ac.uk/"  # Example XSS testing site
    scan_xss(url)
